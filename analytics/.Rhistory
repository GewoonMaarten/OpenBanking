) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
table(data_RABO_1_clean$categorie)
data_RABO_1 = read_csv2("data/bank_account_transactions_RABO_1.csv")
data_RABO_2 = read_csv("data/bank_account_transactions_RABO_2.csv")
data_RABO_3 = read_csv("data/bank_account_transactions_RABO_3.csv")
data_INGB_1 = read_csv2("data/bank_account_transactions_INGB_1.csv")
data_RABO_1_clean <- parse_RABO(data_RABO_1)
function (df, dots)
library(tidyverse)
library(janitor)
data_RABO_1 = read_csv2("data/bank_account_transactions_RABO_1.csv")
data_RABO_2 = read_csv("data/bank_account_transactions_RABO_2.csv")
data_RABO_3 = read_csv("data/bank_account_transactions_RABO_3.csv")
data_INGB_1 = read_csv2("data/bank_account_transactions_INGB_1.csv")
parse_RABO <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven")
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven")
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
parse_RABO <- function(dataset) {
View(dataset)
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven")
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_1 = read_csv("data/bank_account_transactions_RABO_1.csv")
data_RABO_2 = read_csv("data/bank_account_transactions_RABO_2.csv")
data_RABO_3 = read_csv("data/bank_account_transactions_RABO_3.csv")
data_INGB_1 = read_csv2("data/bank_account_transactions_INGB_1.csv")
parse_RABO <- function(dataset) {
View(dataset)
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven")
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven")
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
parse_RABO <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven")
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven")
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
table(data_RABO_1_clean$categorie)
parse_RABO <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
as_factor()
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven") %>%
as_factor()
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
table(data_RABO_1_clean$categorie)
write_csv(data_RABO_1_clean, "data/bank_account_transactions_RABO_1_clean.csv")
write_csv(data_RABO_2_clean, "data/bank_account_transactions_RABO_2_clean.csv")
write_csv(data_RABO_3_clean, "data/bank_account_transactions_RABO_3_clean.csv")
write_csv(data_INGB_1_clean, "data/bank_account_transactions_INGB_1_clean.csv")
write_rds(data_RABO_1_clean, "data/bank_account_transactions_RABO_1_clean.rds")
write_rds(data_RABO_2_clean, "data/bank_account_transactions_RABO_2_clean.rds")
write_rds(data_RABO_3_clean, "data/bank_account_transactions_RABO_3_clean.rds")
write_rds(data_INGB_1_clean, "data/bank_account_transactions_INGB_1_clean.rds")
master <- rbind(
data_RABO_1_clean
,data_RABO_2_clean
,data_RABO_3_clean
,data_INGB_1_clean
) %>%
drop_na()
write_csv(master, "data/transactions_master.csv")
write_rds(master, "data/transactions_master.rds")
library(tidyverse)
library(janitor)
data_RABO_1 = read_csv("data/bank_account_transactions_RABO_1.csv")
data_RABO_2 = read_csv("data/bank_account_transactions_RABO_2.csv")
data_RABO_3 = read_csv("data/bank_account_transactions_RABO_3.csv")
data_INGB_1 = read_csv2("data/bank_account_transactions_INGB_1.csv")
parse_RABO <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
as_factor()
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven") %>%
as_factor()
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
library(tidyverse)
library(janitor)
data_RABO_1 = read_csv("data/bank_account_transactions_RABO_1.csv")
data_RABO_2 = read_csv("data/bank_account_transactions_RABO_2.csv")
data_RABO_3 = read_csv("data/bank_account_transactions_RABO_3.csv")
data_INGB_1 = read_csv("data/bank_account_transactions_INGB_1.csv")
parse_RABO <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(bedrag)
,datum = as.Date(datum, tryFormats = c("%m/%d/%Y", "%d-%m-%y", "%d/%m/%Y"))
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
as_factor()
,naam = parse_character(naam_tegenpartij)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
parse_INGB <- function(dataset) {
dataset <- clean_names(dataset, case = "snake")
dataset %>%
mutate(
bedrag = parse_number(ifelse(kolom6 =="Af",kolom7 * -1, kolom7))
,datum = parse_date(kolom1,"%Y%m%d")
,dag = parse_number(lubridate::day(datum))
,maand = parse_number(lubridate::month(datum))
,is_vaste_last = parse_factor(is_vaste_last, levels = c(0,1))
,categorie = categorie %>%
trimws() %>%
tolower() %>%
replace(categorie %in% c("uitgaven", "overige", "ovee"), "overige uitgaven") %>%
replace(categorie %in% c("medisch"), "medische kosten") %>%
replace(categorie == "uitgaven", "overige uitgaven") %>%
as_factor()
,naam = parse_character(kolom2)
) %>%
select(
bedrag
,naam
,dag
,maand
,is_vaste_last
,categorie
)
}
data_RABO_1_clean <- parse_RABO(data_RABO_1)
data_RABO_2_clean <- parse_RABO(data_RABO_2)
data_RABO_3_clean <- parse_RABO(data_RABO_3)
data_INGB_1_clean <- parse_INGB(data_INGB_1)
table(data_RABO_1_clean$categorie)
write_csv(data_RABO_1_clean, "data/bank_account_transactions_RABO_1_clean.csv")
write_csv(data_RABO_2_clean, "data/bank_account_transactions_RABO_2_clean.csv")
write_csv(data_RABO_3_clean, "data/bank_account_transactions_RABO_3_clean.csv")
write_csv(data_INGB_1_clean, "data/bank_account_transactions_INGB_1_clean.csv")
write_rds(data_RABO_1_clean, "data/bank_account_transactions_RABO_1_clean.rds")
write_rds(data_RABO_2_clean, "data/bank_account_transactions_RABO_2_clean.rds")
write_rds(data_RABO_3_clean, "data/bank_account_transactions_RABO_3_clean.rds")
write_rds(data_INGB_1_clean, "data/bank_account_transactions_INGB_1_clean.rds")
master <- rbind(
data_RABO_1_clean
,data_RABO_2_clean
,data_RABO_3_clean
,data_INGB_1_clean
) %>%
drop_na()
write_csv(master, "data/transactions_master.csv")
write_rds(master, "data/transactions_master.rds")
library(h2o)
library(janitor)
library(tidyverse)
library(skimr)
library(stringr)
localH2O = h2o.init()
data <- read_rds("data/transactions_master.rds")
skim(data)
data_hex = as.h2o(data, destination_frame = "data_hex")
tokenize <- function(words) {
tokenized <- h2o.tokenize(words, "\\\\W+")
#convert to lower
tokenized_lower <- h2o.tolower(tokenized)
#remove short words
tokenized_lengths <- h2o.nchar(tokenized_lower)
tokenized_filtered <- tokenized_lower[is.na(tokenized_lengths) || tokenized_lengths >= 2,]
#remove numbers
tokenized_words <- tokenized_filtered[h2o.grep("[0-9]", tokenized_filtered, invert = TRUE, output.logical = TRUE),]
}
words <- tokenize(data_hex$naam)
words
w2v_model <- h2o.word2vec(
words,
word_model = "Skipgram"
)
h2o.findSynonyms(w2v_model, "ditzo", count = 1)
tekst_vec <- h2o.transform(w2v_model, words, aggregate_method = "AVERAGE")
valid <- !is.na(tekst_vec$C1)
data_hex_new <- h2o.cbind(data_hex[valid,], tekst_vec[valid,])
data_hex_new_split <- h2o.splitFrame(
data_hex_new,
ratios = 0.8,
seed = 4043
)
skim(as.data.frame(data_hex_new))
glm_model <- h2o.glm(
y = "is_vaste_last",
family = "binomial",
nfolds = 10,
alpha = 0.5,
training_frame = data_hex_new_split[[1]],
validation_frame = data_hex_new_split[[2]]
)
h2o.confusionMatrix(glm_model)
gbm_model <- h2o.gbm(
y = "categorie",
training_frame = data_hex_new_split[[1]],
validation_frame = data_hex_new_split[[2]]
)
head(as.data.frame(data_hex_new_split[[2]])$naam_tegenpartij)
h2o.predict(gbm_model, data_hex_new_split[[2]])
h2o.confusionMatrix(gbm_model)
gbm_params1 <- list(learn_rate = c(0.01, 0.1),
max_depth = c(3, 5, 9),
sample_rate = c(0.8, 1.0),
col_sample_rate = c(0.2, 0.5, 1.0))
gbm_grid1 <- h2o.grid("gbm", y = "categorie",
grid_id = "gbm_grid1",
training_frame = data_hex_new_split[[1]],
validation_frame = data_hex_new_split[[2]],
ntrees = 100,
seed = 1,
hyper_params = gbm_params1)
# Get the grid results, sorted by validation AUC
gbm_gridperf1 <- h2o.getGrid(grid_id = "gbm_grid1",
sort_by = "auc",
decreasing = TRUE)
# Get the grid results, sorted by validation AUC
gbm_gridperf1 <- h2o.getGrid(grid_id = "gbm_grid1",
sort_by = "rmse",
decreasing = TRUE)
print(gbm_gridperf1)
?h2o.getGrid
# Get the grid results, sorted by validation AUC
gbm_gridperf1 <- h2o.getGrid(grid_id = "gbm_grid1",
sort_by = "accuracy",
decreasing = TRUE)
print(gbm_gridperf1)
